{"version":3,"sources":["components/icon.js","components/footer.js","components/SideArea.js","components/MainArea.js","App.js","serviceWorker.js","index.js"],"names":["Icon","props","useState","hover","setHover","className","onMouseEnter","onMouseLeave","style","background","bC","href","url","onClick","window","open","icon","size","transform","Footer","faAt","faLinkedinIn","faGithub","faTwitter","faInstagram","faFacebookF","Area","faAngleDoubleDown","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wWAuCeA,MAnCf,SAAcC,GAAQ,IAAD,EACOC,oBAAS,GADhB,mBACZC,EADY,KACLC,EADK,KAEnB,OACE,6BACE,4BACE,wBACEC,UAAU,iBACVC,aAAc,WACZF,GAAS,IAEXG,aAAc,WACZH,GAAS,IAEXI,MAAK,eAAQL,EAAQ,CAAEM,WAAYR,EAAMS,IAAO,OAEhD,uBACEC,KAAMV,EAAMW,IACZC,QAAS,WACPC,OAAOC,KAAK,IAAK,UACjBD,OAAOC,KAAKd,EAAMW,IAAK,WAGzB,kBAAC,IAAD,CACEP,UAAU,OACVW,KAAMf,EAAMe,KACZC,KAAK,KACLT,MAAK,eAAQL,EAAQ,CAAEe,UAAW,mBAAsB,aCKvDC,MAvBf,WAGE,OACE,yBAAKd,UAAU,cACb,yBAAKA,UAAU,WAAf,iBACA,yBAAKA,UAAU,cACb,kBAAC,EAAD,CAAMW,KAAMI,IAAMR,IAAK,8BAA+BF,GAAI,YAC1D,kBAAC,EAAD,CAAMM,KAAMK,IAAcT,IAAK,8CAA+CF,GAAI,YAClF,kBAAC,EAAD,CAAMM,KAAMM,IAAUV,IAAK,oCAAqCF,GAAI,YACpE,kBAAC,EAAD,CAAMM,KAAMO,IAAWX,IAAK,qCAAsCF,GAAI,YACtE,kBAAC,EAAD,CACEM,KAAMQ,IACNZ,IAAK,4CACLF,GACE,qGAGJ,kBAAC,EAAD,CAAMM,KAAMS,IAAab,IAAK,0CAA2CF,GAAI,eCLtEgB,G,MAtBF,WACX,OACE,yBAAKrB,UAAU,WACb,wBAAIA,UAAU,QAAd,WACA,yBAAKA,UAAU,WAAf,wCAEA,yBAAKA,UAAU,gBAAf,QAEE,8BAEF,yBAAKA,UAAU,gBAAf,SAEE,8BAEF,yBAAKA,UAAU,gBAAf,iBAEE,8BAEF,yBAAKA,UAAU,gBAAf,qBCLSqB,G,MAXF,WACX,OACE,yBAAKrB,UAAU,WAAf,gBAEE,yBAAKA,UAAU,UAFjB,iCAIE,yBAAKA,UAAU,UACf,kBAAC,IAAD,CAAiBY,KAAM,KAAMD,KAAMW,S,MCM1BC,MAZf,WACE,OACE,6BACE,yBAAKvB,UAAU,QACb,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,EAAD,QCDcwB,QACW,cAA7Bf,OAAOgB,SAASC,UAEe,UAA7BjB,OAAOgB,SAASC,UAEhBjB,OAAOgB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e43fc747.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport css from './icon.css';\n\nfunction Icon(props) {\n  const [hover, setHover] = useState(false);\n  return (\n    <div>\n      <ul>\n        <li\n          className=\"IconBackground\"\n          onMouseEnter={() => {\n            setHover(true);\n          }}\n          onMouseLeave={() => {\n            setHover(false);\n          }}\n          style={{ ...(hover ? { background: props.bC } : null) }}\n        >\n          <a\n            href={props.url}\n            onClick={() => {\n              window.open('#', '_blank');\n              window.open(props.url, '_self');\n            }}\n          >\n            <FontAwesomeIcon\n              className=\"Icon\"\n              icon={props.icon}\n              size=\"xs\"\n              style={{ ...(hover ? { transform: 'rotateY(360deg)' } : null) }}\n            />\n          </a>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default Icon;\n","import React from 'react';\nimport './footer.css';\nimport {\n  faFacebookF,\n  faLinkedinIn,\n  faTwitter,\n  faGithub,\n  faInstagram\n} from '@fortawesome/free-brands-svg-icons';\nimport { faAt } from '@fortawesome/free-solid-svg-icons';\nimport Icon from './icon.js';\n\nfunction Footer() {\n \n\n  return (\n    <div className=\"Connectbar\">\n      <div className=\"Connect\">Let's Connect</div>\n      <div className=\"Iconsgroup\">\n        <Icon icon={faAt} url={'mailto:swetank199@gmail.com'} bC={'#ce473a'} />\n        <Icon icon={faLinkedinIn} url={'https://www.linkedin.com/in/radicalswetank/'} bC={'#0077b5'} />\n        <Icon icon={faGithub} url={'https://github.com/radicalswetank'} bC={'#24292e'} />\n        <Icon icon={faTwitter} url={'https://twitter.com/radicalswetank'} bC={'#55acee'} />\n        <Icon\n          icon={faInstagram}\n          url={'https://www.instagram.com/radicalswetank/'}\n          bC={\n            'radial-gradient(circle at 30% 110%, #ffdb8b 0%,#ee653d 25%,#d42e81 50%,#a237b6 75%,#3e5fbc 100%)'\n          }\n        />\n        <Icon icon={faFacebookF} url={'https://www.facebook.com/radicalswetank'} bC={'#3b5999'} />\n      </div>\n    </div>\n  );\n}\nexport default Footer;\n","import React from 'react';\n//import style from './SideArea.style.js';\nimport './SideArea.css';\nconst Area = () => {\n  return (\n    <div className=\"Sidebar\">\n      <h1 className=\"Head\">SWETANK</h1>\n      <div className=\"Subhead\">Web Developer and Fintech Enthusiast</div>\n\n      <div className=\"Hoverbuttons\">\n        About\n        <br />\n      </div>\n      <div className=\"Hoverbuttons\">\n        Skills\n        <br />\n      </div>\n      <div className=\"Hoverbuttons\">\n        Projects Talks\n        <br />\n      </div>\n      <div className=\"Hoverbuttons\">Certifications</div>\n    </div>\n  );\n};\nexport default Area;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faAngleDoubleDown } from '@fortawesome/free-solid-svg-icons';\nimport './MainArea.css';\n\nconst Area = () => {\n  return (\n    <div className=\"Mainbar\">\n      To Be updated\n      <div className=\"Break\" />\n      Meanwhile feel free to connect\n      <div className=\"Break\" />\n      <FontAwesomeIcon size={'5x'} icon={faAngleDoubleDown} />\n    </div>\n  );\n};\nexport default Area;\n","import React from 'react';\nimport Footer from './components/footer';\nimport SideArea from './components/SideArea';\nimport MainArea from './components/MainArea';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <div className=\"Bars\">\n        <SideArea />\n        <MainArea />\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}